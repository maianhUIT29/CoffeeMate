/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.coffeemate.view;
import com.coffeemate.controller.EmployeeController;
import com.coffeemate.model.Employee;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import java.util.stream.Collectors;
/**
 *
 * @author meiln
 */
public class EmployeeView extends javax.swing.JFrame 
{
 private EmployeeController employeeController;  // Khai báo controller
    /**
     * Creates new form EmployeeView
     */
    public EmployeeView() {
        initComponents();
         employeeController = new EmployeeController();
    if (employeeController != null) {
        loadEmployeeData();
    }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngroupCRUD = new javax.swing.ButtonGroup();
        lblTableTitle = new javax.swing.JLabel();
        btnCreate = new javax.swing.JToggleButton();
        btnDelete = new javax.swing.JToggleButton();
        btnUpdate = new javax.swing.JToggleButton();
        btnSearch = new javax.swing.JToggleButton();
        spCRUDTable = new javax.swing.JScrollPane();
        tbEmployee = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTableTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTableTitle.setText("Bảng nhân viên");

        btngroupCRUD.add(btnCreate);
        btnCreate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnCreate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/coffeemate/resources/ic_create.png"))); // NOI18N
        btnCreate.setText("Thêm");
        btnCreate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCreate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btngroupCRUD.add(btnDelete);
        btnDelete.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/coffeemate/resources/ic_delete.png"))); // NOI18N
        btnDelete.setText("Xóa");
        btnDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btngroupCRUD.add(btnUpdate);
        btnUpdate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/coffeemate/resources/ic_update.png"))); // NOI18N
        btnUpdate.setText("Sửa");
        btnUpdate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnUpdate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btngroupCRUD.add(btnSearch);
        btnSearch.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/coffeemate/resources/ic_search.png"))); // NOI18N
        btnSearch.setText("Tìm kiếm");
        btnSearch.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSearch.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tbEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Họ tên", "Vai trò", "SDT", "Email", "Ngày tham gia"
            }
        ));
        spCRUDTable.setViewportView(tbEmployee);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spCRUDTable)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnCreate)
                        .addGap(43, 43, 43)
                        .addComponent(btnDelete)
                        .addGap(48, 48, 48)
                        .addComponent(btnUpdate)
                        .addGap(53, 53, 53)
                        .addComponent(btnSearch))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addComponent(lblTableTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(207, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblTableTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnCreate)
                    .addComponent(btnDelete)
                    .addComponent(btnUpdate)
                    .addComponent(btnSearch))
                .addGap(18, 18, 18)
                .addComponent(spCRUDTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
     String keyword = JOptionPane.showInputDialog(this, "Nhập tên NV cần tìm kiếm:");
    if (keyword != null && !keyword.trim().isEmpty()) {
        String lowerKeyword = keyword.trim().toLowerCase();

        List<Employee> employees = employeeController.getAllEmployees().stream()
                .filter(e -> {
                    if (e.getFullName() != null) {
                        for (String part : e.getFullName().toLowerCase().split("\\s+")) {
                            if (part.equals(lowerKeyword)) {   // chỉ so sánh từng từ trong họ tên
                                return true;
                            }
                        }
                    }
                    return false; // Không còn kiểm tra role, phone, email nữa
                })
                .collect(Collectors.toList());

        DefaultTableModel model = (DefaultTableModel) tbEmployee.getModel();
        model.setRowCount(0);
        for (Employee emp : employees) {
            model.addRow(new Object[]{
                emp.getEmployeeID(), 
                emp.getFullName(), 
                emp.getRole(), 
                emp.getPhone(), 
                emp.getEmail(), 
                emp.getHireDate()
            });
        }
    } else {
        loadEmployeeData();  
    }    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int row = tbEmployee.getSelectedRow();
        if (row != -1) {
            int id = (int) tbEmployee.getValueAt(row, 0);
            int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa nhân viên này?", "Xác nhận", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION && employeeController.deleteEmployee(id)) {
                JOptionPane.showMessageDialog(this, "Xóa nhân viên thành công!");
                loadEmployeeData();
            } else {
                JOptionPane.showMessageDialog(this, "Xóa nhân viên thất bại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn nhân viên để xóa!");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
         String fullName = JOptionPane.showInputDialog(this, "Nhập họ tên nhân viên:");
    if (fullName == null || fullName.trim().isEmpty()) return;

    String role = JOptionPane.showInputDialog(this, "Nhập vai trò:");
    if (role == null || role.trim().isEmpty()) return;

    String phone = JOptionPane.showInputDialog(this, "Nhập số điện thoại:");
    if (phone == null || phone.trim().isEmpty()) return;

    String email = JOptionPane.showInputDialog(this, "Nhập email:");
    if (email == null || email.trim().isEmpty()) return;

    Employee employee = new Employee();  // constructor rỗng
    employee.setFullName(fullName);
    employee.setRole(role);
    employee.setPhone(phone);
    employee.setEmail(email);
    employee.setHireDate(new java.util.Date());

    if (employeeController.addEmployee(employee)) {
        JOptionPane.showMessageDialog(this, "Thêm nhân viên thành công!");
        loadEmployeeData();
    } else {
        JOptionPane.showMessageDialog(this, "Thêm nhân viên thất bại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
     int row = tbEmployee.getSelectedRow();
        if (row != -1) {
            int id = (int) tbEmployee.getValueAt(row, 0);
            Employee employee = employeeController.getEmployeeById(id);
            if (employee != null) {
                String fullName = JOptionPane.showInputDialog(this, "Nhập họ tên mới:", employee.getFullName());
                String role = JOptionPane.showInputDialog(this, "Nhập vai trò mới:", employee.getRole());
                String phone = JOptionPane.showInputDialog(this, "Nhập số điện thoại mới:", employee.getPhone());
                String email = JOptionPane.showInputDialog(this, "Nhập email mới:", employee.getEmail());

                if (fullName != null && role != null && phone != null && email != null) {
                    employee.setFullName(fullName);
                    employee.setRole(role);
                    employee.setPhone(phone);
                    employee.setEmail(email);
                    if (employeeController.updateEmployee(employee)) {
                        JOptionPane.showMessageDialog(this, "Cập nhật thành công!");
                        loadEmployeeData();
                    } else {
                        JOptionPane.showMessageDialog(this, "Cập nhật thất bại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn nhân viên để sửa!");
        }

    }//GEN-LAST:event_btnUpdateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginForm().setVisible(true);
            }
        });
    }


    // Hàm tải và hiển thị dữ liệu nhân viên vào bảng
    private void loadEmployeeData() {
        List<Employee> employees = employeeController.getAllEmployees();
        DefaultTableModel model = (DefaultTableModel) tbEmployee.getModel();
        model.setRowCount(0);  // Xóa các hàng cũ

        for (Employee emp : employees) {
            model.addRow(new Object[]{
                emp.getEmployeeID(), 
                emp.getFullName(), 
                emp.getRole(), 
                emp.getPhone(), 
                emp.getEmail(), 
                emp.getHireDate()
            });
        }
    }


   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnCreate;
    private javax.swing.JToggleButton btnDelete;
    private javax.swing.JToggleButton btnSearch;
    private javax.swing.JToggleButton btnUpdate;
    private javax.swing.ButtonGroup btngroupCRUD;
    private javax.swing.JLabel lblTableTitle;
    private javax.swing.JScrollPane spCRUDTable;
    private javax.swing.JTable tbEmployee;
    // End of variables declaration//GEN-END:variables
}